socket.on('date_selected_OK_station_status', async (date) => {
    console.log("Received date from client Station_status shift:", date);

    // Convert string date ("2025-04-04") to JS Date object
    const jsDate = new Date(date);

    let pool;
    const transaction = new sql.Transaction();

    try {
        pool = await sql.connect(sqlConfig);
        await transaction.begin();

        const request = new sql.Request(transaction);

        // 1. Select data before the given date
        const selectQuery = `
            SELECT 
                PackName, FinalQRCode, ModuleName, ModuleBarcode, ModulePrintStatus, ModuleOCV_status, Welding_status, 
                IR_V_status, FinalQRCodePrint_status, AirLeakage_status, ChargingDischarging_status, PDI_status, 
                EntryDateTime, moduleNumber, line, shift
            FROM taco_treceability.station_status
            WHERE EntryDateTime < @selectedDate
        `;
        const result = await request
            .input('selectedDate', sql.DateTime, jsDate)
            .query(selectQuery);

        const rows = result.recordset;
        if (rows.length === 0) {
            console.log('No records found before this date.');
            await transaction.rollback();
            socket.emit('transfer_complete', { status: 'error', message: 'No records found before this date.' });
            return;
        }

        // 2. Insert into station_status_Aug25
        const table = new sql.Table('taco_treceability.station_status_Aug25');
        table.create = false; // table already exists

        // Define columns (except srno)
        table.columns.add('PackName', sql.NVarChar(255), { nullable: true });
        table.columns.add('FinalQRCode', sql.NVarChar(255), { nullable: true });
        table.columns.add('ModuleName', sql.NVarChar(255), { nullable: true });
        table.columns.add('ModuleBarcode', sql.NVarChar(255), { nullable: true });
        table.columns.add('ModulePrintStatus', sql.NVarChar(255), { nullable: true });
        table.columns.add('ModuleOCV_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('Welding_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('IR_V_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('FinalQRCodePrint_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('AirLeakage_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('ChargingDischarging_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('PDI_status', sql.NVarChar(255), { nullable: true });
        table.columns.add('EntryDateTime', sql.DateTime, { nullable: true });
        table.columns.add('moduleNumber', sql.NVarChar(255), { nullable: true });
        table.columns.add('line', sql.NVarChar(255), { nullable: true });
        table.columns.add('shift', sql.NVarChar(255), { nullable: true });

        // Add rows
        rows.forEach(row => {
            table.rows.add(
                row.PackName,
                row.FinalQRCode,
                row.ModuleName,
                row.ModuleBarcode,
                row.ModulePrintStatus,
                row.ModuleOCV_status,
                row.Welding_status,
                row.IR_V_status,
                row.FinalQRCodePrint_status,
                row.AirLeakage_status,
                row.ChargingDischarging_status,
                row.PDI_status,
                row.EntryDateTime,
                row.moduleNumber,
                row.line,
                row.shift
            );
        });

        const bulkRequest = new sql.Request(transaction);
        await bulkRequest.bulk(table);
        console.log('Data inserted into station_status_Aug25 successfully.');

        // 3. Delete from original table after successful insertion
        const deleteQuery = `
            DELETE FROM taco_treceability.station_status
            WHERE EntryDateTime < @selectedDate
        `;
        await request
            .input('selectedDate', sql.DateTime, jsDate)
            .query(deleteQuery);

        console.log('Data deleted from station_status successfully.');

        // Commit transaction
        await transaction.commit();
        socket.emit('transfer_complete', { status: 'success', message: 'Data transferred and deleted successfully.' });

    } catch (err) {
        console.error('Error transferring data:', err);

        // Rollback transaction if error
        try {
            await transaction.rollback();
        } catch (rollbackErr) {
            console.error('Rollback failed:', rollbackErr);
        }

        socket.emit('transfer_complete', { status: 'error', message: err.message });
    } finally {
        if (pool) {
            pool.close();
        }
    }
});
