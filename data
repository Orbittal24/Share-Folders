const sql = require("mssql");

const config = {
  user: "user_mis",
  password: "admin",
  database: "taco_treceability",
  server: "localhost\\MSSQLSERVER",
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  },
  options: {
    encrypt: true, // for azure
    trustServerCertificate: true // local dev / self-signed certs
  }
};

async function updateModuleBarcodes() {
  var New_final_qr_code = "DJ2038-G2H0000033";

  try {
    let pool = await sql.connect(config);

    // 1. Fetch module_barcodes from battery_details
    let result1 = await pool.request()
      .input("final_qrcode", sql.VarChar, New_final_qr_code)
      .query(`
        SELECT DISTINCT module_barcode_string
        FROM taco_treceability.battery_details
        WHERE final_qrcode = @final_qrcode
          AND module_barcode_string LIKE 'BA%'
          AND module_name = 'Smoke Sensor'
      `);

    let table1 = result1.recordset.map(r => r.module_barcode_string);

    // 2. Fetch module_barcodes from torque_details_EIP_kr_tray
    let result2 = await pool.request()
      .query(`
        SELECT DISTINCT module_barcode
        FROM taco_treceability.torque_details_EIP_kr_tray
        WHERE module_barcode LIKE 'BA%'
      `);

    let table2 = result2.recordset.map(r => r.module_barcode);

    console.log("Table 1:", table1);
    console.log("Table 2:", table2);

    if (table1.length !== table2.length) {
      throw new Error(`Array length mismatch: Table1=${table1.length}, Table2=${table2.length}`);
    }

    // 3. Update module_barcode + smoke_sensor_linked_pack_no
    for (let i = 0; i < table1.length; i++) {
      let oldValue = table2[i];
      let newValue = table1[i];

      console.log(`Updating module_barcode: ${oldValue} -> ${newValue}`);

      await pool.request()
        .input("newValue", sql.VarChar, newValue)
        .input("oldValue", sql.VarChar, oldValue)
        .input("final_qrcode", sql.VarChar, New_final_qr_code)
        .query(`
          UPDATE taco_treceability.torque_details_EIP_kr_tray
          SET module_barcode = @newValue,
              smoke_sensor_linked_pack_no = @final_qrcode
          WHERE module_barcode = @oldValue
        `);
    }

    // 4. Update pack_no for all BA% module_barcodes
    console.log(`Updating pack_no for all module_barcodes LIKE 'BA%' -> ${New_final_qr_code}`);
    await pool.request()
      .input("final_qrcode", sql.VarChar, New_final_qr_code)
      .query(`
        UPDATE taco_treceability.torque_details_EIP_kr_tray
        SET pack_no = @final_qrcode
        WHERE module_barcode LIKE 'BA%'
      `);

    // 5. Update pack_no AND module_barcode for module_name M1–M6
    console.log(`Updating pack_no and module_barcode for module_name IN (M1–M6) -> ${New_final_qr_code}`);
    await pool.request()
      .input("final_qrcode", sql.VarChar, New_final_qr_code)
      .query(`
        UPDATE taco_treceability.torque_details_EIP_kr_tray
        SET pack_no = @final_qrcode,
            module_barcode = @final_qrcode
        WHERE module_name IN ('M1','M2','M3','M4','M5','M6')
      `);

    // 6. Insert updated rows into import2 table (exclude sr_no)
    console.log(`Inserting updated rows into torque_details_EIP_import2`);
    await pool.request()
      .query(`
        INSERT INTO taco_treceability.torque_details_EIP_import2
        (pack_name, module_name, torque, angle, torque_status, date_dd, shift, module_barcode,
         process_status, pack_no, rework_status, bypass_operator, bypass_reason, process_name, station_name, smoke_sensor_linked_pack_no)
        SELECT pack_name, module_name, torque, angle, torque_status, date_dd, shift, module_barcode,
               process_status, pack_no, rework_status, bypass_operator, bypass_reason, process_name, station_name, smoke_sensor_linked_pack_no
        FROM taco_treceability.torque_details_EIP_kr_tray
      `);

    console.log("All updates + insert completed successfully.");
    sql.close();

  } catch (err) {
    console.error("Error:", err);
    sql.close();
  }
}

updateModuleBarcodes();
