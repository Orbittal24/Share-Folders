socket.on('date_selected_OK_station_status', async (date) => {
    console.log("Received date from client Station_status shift:", date);

    // Force to start of the given day (midnight)
    const jsDate = new Date(date + "T00:00:00");

    let pool;
    const transaction = new sql.Transaction();

    try {
        pool = await sql.connect(sqlConfig);
        await transaction.begin();

        const request = new sql.Request(transaction);

        // 1. Select data before the given date
        const selectQuery = `
            SELECT 
                PackName, FinalQRCode, ModuleName, ModuleBarcode, ModulePrintStatus, ModuleOCV_status, Welding_status, 
                IR_V_status, FinalQRCodePrint_status, AirLeakage_status, ChargingDischarging_status, PDI_status, 
                EntryDateTime, moduleNumber, line, shift
            FROM taco_treceability.station_status
            WHERE EntryDateTime < @selectedDate
        `;

        const result = await request
            .input('selectedDate', sql.DateTime, jsDate)   // âœ… now passing proper datetime
            .query(selectQuery);

        const rows = result.recordset;
        if (rows.length === 0) {
            console.log('No records found before this date.');
            await transaction.rollback();
            socket.emit('transfer_complete', { status: 'error', message: 'No records found before this date.' });
            return;
        }

        // ... your bulk insert + delete code remains the same ...
        
        // 3. Delete from original table after successful insertion
        const deleteQuery = `
            DELETE FROM taco_treceability.station_status
            WHERE EntryDateTime < @selectedDate
        `;
        await request
            .input('selectedDate', sql.DateTime, jsDate)
            .query(deleteQuery);

        console.log('Data deleted from station_status successfully.');

        await transaction.commit();
        socket.emit('transfer_complete', { status: 'success', message: 'Data transferred and deleted successfully.' });

    } catch (err) {
        console.error('Error transferring data:', err);
        try {
            await transaction.rollback();
        } catch (rollbackErr) {
            console.error('Rollback failed:', rollbackErr);
        }
        socket.emit('transfer_complete', { status: 'error', message: err.message });
    } finally {
        if (pool) {
            pool.close();
        }
    }
});
