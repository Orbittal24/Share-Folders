Got it üëç You want to enable auditing for the entire database (taco_treceability) instead of just one table. Since it has a large number of tables, it‚Äôs better to create a Database Audit Specification that applies to the whole database.

Here‚Äôs how you can do it:

üîπ Step 1: Create a Server Audit

This defines where logs will be stored.

USE master;
GO

CREATE SERVER AUDIT Audit_TacoDB
TO FILE (FILEPATH = 'C:\SQLAudit\')  -- Change this path, ensure SQL has write permissions
WITH (ON_FAILURE = CONTINUE);
GO

ALTER SERVER AUDIT Audit_TacoDB
WITH (STATE = ON);  -- Turn it ON
GO

üîπ Step 2: Create a Database Audit Specification

This will capture all DML actions (INSERT, UPDATE, DELETE) on the taco_treceability database.

USE taco_treceability;
GO

CREATE DATABASE AUDIT SPECIFICATION Audit_AllTables
FOR SERVER AUDIT Audit_TacoDB
-- Track all inserts
ADD (INSERT ON DATABASE::taco_treceability BY [public]),
-- Track all updates
ADD (UPDATE ON DATABASE::taco_treceability BY [public]),
-- Track all deletes
ADD (DELETE ON DATABASE::taco_treceability BY [public])
WITH (STATE = ON);
GO

üîπ Step 3: Verify Audit

Check if the audit is enabled:

SELECT name, is_state_enabled, audit_file_path 
FROM sys.server_audits;

SELECT name, is_state_enabled 
FROM sys.database_audit_specifications;

üîπ Step 4: Read Audit Logs

All actions across all tables in taco_treceability will be logged to the .sqlaudit files.

To read them in SQL Server:

SELECT 
    event_time,
    action_id,
    statement,
    server_principal_name AS executed_by,
    object_name,
    database_name,
    schema_name
FROM sys.fn_get_audit_file('C:\SQLAudit\*.sqlaudit', DEFAULT, DEFAULT)
WHERE database_name = 'taco_treceability';

üîπ What This Will Capture

Who executed (server_principal_name)

When it happened (event_time)

What action (action_id: I=Insert, U=Update, D=Delete)

Which table (object_name)

The query executed (statement)

‚ö†Ô∏è Important Considerations:

This will log every insert/update/delete on all tables, so the audit files can grow very large quickly.

Best practice: Store audit logs on a separate disk.

If you only care about DELETE, you can remove the INSERT and UPDATE lines from the audit specification.

üëâ Do you want me to give you a DELETE-only version (to reduce log size), or do you want to keep INSERT + UPDATE + DELETE for full history tracking?


USE taco_treceability;
GO

-- First drop the existing spec
DROP DATABASE AUDIT SPECIFICATION Audit_AllTables1;
GO

-- Recreate with ALTER + UPDATE + DELETE
CREATE DATABASE AUDIT SPECIFICATION Audit_AllTables1
FOR SERVER AUDIT Audit_TacoDB1
    ADD (ALTER ON DATABASE::taco_treceability BY [public]),
    ADD (UPDATE ON DATABASE::taco_treceability BY [public]),
    ADD (DELETE ON DATABASE::taco_treceability BY [public])
WITH (STATE = ON);
GO


///
Msg 33071, Level 16, State 3, Line 5
This command requires audit specification to be disabled. Disable the audit specification and rerun this command.
Msg 102, Level 15, State 1, Line 11
Incorrect syntax near 'ALTER'.
Msg 319, Level 15, State 1, Line 14
Incorrect syntax near the keyword 'with'. If this statement is a common table expression, an xmlnamespaces clause or a change tracking context clause, the previous statement must be terminated with a semicolon.

Completion time: 2025-08-23T17:20:24.6232845+05:30
